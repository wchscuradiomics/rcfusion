#######http://www.mpip.sdnu.edu.cn/##############################################################
#######https://pyradiomics.readthedocs.io/en/latest/index.html###################################
#######CT-based Radiomics Extraction using PyRadiomics ##########################################

imageType:
  Original: {}
  LoG:
    sigma: [0.5, 1.0, 1.5, 2.0, 2.5]  # If you include sigma values >5, remember to also increase the padDistance.
  Wavelet: 
    start_level: 0
    binCount: 16
    level: 2
    wavelet: {} # E.g., 'haar'. Refer to ['haar','dmey', 'sym[2-9]','db[2-9]','coif[1-5]', 'bior[1.1, 1.3, 1.5, 2.2, 2.4, 2.6, 2.8, 3.1, 3.3, 3.5, 3.7, 3.9, 4.4, 5.5, 6.8]', 'rbio[1.1, 1.3, 1.5, 2.2, 2.4, 2.6, 2.8, 3.1, 3.3, 3.5, 3.7, 3.9, 4.4, 5.5, 6.8]']
  Square: {}
  SquareRoot: {}
  Logarithm: {}
  Exponential: {}
  Gradient: {}
  # LBP2D: {} # It is not used because there usually are different sizes of ROIs and time consuming.
  # LBP3D: {} # It is not used because there usually are different sizes of ROIs and time consuming.
  
    
featureClass:
  # redundant Compactness 1, Compactness 2 an Spherical Disproportion features are disabled by default, they can be
  # enabled by specifying individual feature names and including them in the list.
  shape:
  firstorder:
  glcm:
    # Disable SumAverage and MCC (long calculation time and computational instability) by specifying all other GLCM features available.
    - 'Autocorrelation'
    - 'JointAverage'
    - 'ClusterProminence'
    - 'ClusterShade'
    - 'ClusterTendency'
    - 'Contrast'
    - 'Correlation'
    - 'DifferenceAverage'
    - 'DifferenceEntropy'
    - 'DifferenceVariance'
    - 'JointEnergy'
    - 'JointEntropy'
    - 'Imc1'
    - 'Imc2'    
    - 'Idm'
    - 'Idmn'
    - 'Id'
    - 'Idn'
    - 'InverseVariance'
    - 'MaximumProbability'
    - 'SumEntropy'
    - 'SumSquares'
  glrlm:
  glszm:
  gldm:
  ngtdm:

setting:
  ## Normalization:      # CT maybe not need normalization. 
  # normalize: true
  # normalizeScale: 500  # This allows you to use more or less the same bin width.

  ## Resampling:         # Usual spacing for CT is often close to 1 or 2 mm, if very large slice thickness is used, increase the resampled spacing.
  # On a side note: increasing the resampled spacing forces PyRadiomics to look at more coarse textures, which may or may not increase accuracy and stability of your extracted features.
  interpolator: 'sitkBSpline' # sitkNearestNeighbor sitkLinear sitkBSpline sitkGaussian sitkHammingWindowedSinc sitkBlackmanWindowedSinc sitkCosineWindowedSinc sitkWelchWindowedSinc sitkLanczosWindowedSinc
  resampledPixelSpacing: [0.5, 0.5, 2.5]
  padDistance: 10       # Extra padding for large sigma valued LoG filtered images.

  ## Mask validation:    # If you expect very small masks, consider to enable a size constraint by uncommenting settings below:
  minimumROIDimensions: 2
  minimumROISize: 25

  ## Image discretization:   # The ideal number of bins is somewhere in the order of 16-128 bins.
  # using binWidth for CT, PET/CT, X-Ray, etc. (fixed bin-width from 0. Note: voxelArrayShift required for nonzeros)
  # using binCount for MR, US, etc. (For an ROI, equally discretizing the ROI based on [min(ROI) max(ROI)])
  binWidth: 8
  # binCount: 16

  ## first order specific settings:
  voxelArrayShift: 1000     # To prevent negative values from being squared and from calculating binWidth. Usually 1000 for CT.

  ## Misc:                   # default label value. Labels can also be defined in the call to featureextractor.execute, as a commandline argument, or in a column "Label" in the input csv.
  label: 1

  ## Setting preCrop to true speeds up extraction and makes it less memory intensive, especially in the case of large images with only small ROIs.
  # Because image and mask are also cropped onto the bounding box before they are passed to the feature classes, pre-crop is only beneficial when filters are enabled.
  preCrop: false

  ## Resegmentation, comment them for default 
  # Note: it will remove the voxels that outer the range, not reset the voxels to bondary HUs.
  resegmentRange: [0, 128]
  resegmentMode: 'absolute'

  ## Texture matrix weighting
  # This only affects the GLCM and GLRLM feature classes.
  # weightingNorm: 'none'  # 'none' for applies no weighting, mean of values calculated on separate matrices is returned.

  ## Distance to neighbour
  # This specifies the distances between the center voxel and the neighbor, for which angles should be generated.
  # This only affects the GLCM and NGTDM feature classes. The GLSZM and GLRLM feature classes use a fixed distance of 1 (infinity norm) to define neighbours.
  distances: [1]

# Voxel-based specific settings
#voxelSetting:
  ## specifies the size of the kernel to use as the radius from the center voxel. 
  # Therefore the actual size is 2 * kernelRadius + 1. E.g. a value of 1 yields a 3x3x3 kernel, a value of 2 5x5x5, etc. In case of 2D extraction, the generated kernel will also be a 2D shape (square instead of cube).
  # kernelRadius: 1

  ## specifies whether to mask the kernel with the overall mask. 
  # If True, only voxels in the kernel that are also segmented in the mask are used for calculation. Otherwise, all voxels inside the kernel are used. Moreover, gray value discretization is performed over the ROI if the setting is set to True, and over the entire image if False.
  # maskedKernel: true

  ## value to use for voxels outside the ROI, or voxels where calculation failed. 
  # If set to nan, 3D slicer will treat them as transparent voxels
  # initValue: 0